generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  fullname     String
  username     String   @unique
  passwordHash String
  role         String
  email        String
  phoneNumber  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  queues Queue[]
}

model Branch {
  id         Int      @id @default(autoincrement())
  name       String
  branchCode String   @unique
  regionCode String
  address    String
  longitude  Float
  latitude   Float
  holiday    Boolean  @default(false)
  status     Boolean  @default(true)
  createdAt  DateTime @default(now())
  createdBy  String
  updatedAt  DateTime @updatedAt
  updatedBy  String

  lokets Loket[]
  cs     CS[]
  queues Queue[]
}

model Loket {
  id           Int      @id @default(autoincrement())
  branch       Branch   @relation(fields: [branchId], references: [id])
  branchId     Int
  name         String
  username     String   @unique
  passwordHash String
  status       String
  createdAt    DateTime @default(now())
  createdBy    String
  updatedAt    DateTime @updatedAt
  updatedBy    String

  queues Queue[]
}

model CS {
  id           Int      @id @default(autoincrement())
  branch       Branch   @relation(fields: [branchId], references: [id])
  branchId     Int
  name         String
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  createdBy    String
  updatedAt    DateTime @updatedAt
  updatedBy    String

  queues Queue[]
}

model Queue {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  branch        Branch    @relation(fields: [branchId], references: [id])
  branchId      Int
  cs            CS?       @relation(fields: [csId], references: [id])
  csId          Int?
  loket         Loket?    @relation(fields: [loketId], references: [id])
  loketId       Int?
  bookingDate   DateTime
  ticketNumber  String
  email         String
  phoneNumber   String
  estimatedTime DateTime
  calledAt      DateTime?
  status        String
  notification  Boolean   @default(false)
  createdAt     DateTime  @default(now())
  createdBy     String
  updatedAt     DateTime  @updatedAt
  updatedBy     String

  queueLogs         QueueLog[]
  servicesDocuments ServicesDocuments[]
}

model QueueLog {
  id        Int      @id @default(autoincrement())
  queue     Queue    @relation(fields: [queueId], references: [id])
  queueId   Int
  status    String
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String
}

model Holiday {
  id          Int      @id @default(autoincrement())
  holidayName String
  date        DateTime @db.Date
  createdAt   DateTime @default(now())
  createdBy   String
  updatedAt   DateTime @updatedAt
  updatedBy   String
}

model Service {
  id          Int      @id @default(autoincrement())
  serviceName String
  createdAt   DateTime @default(now())
  createdBy   String
  updatedAt   DateTime @updatedAt
  updatedBy   String

  servicesDocuments ServicesDocuments[]
}

model Document {
  id           Int      @id @default(autoincrement())
  documentName String
  createdAt    DateTime @default(now())
  createdBy    String
  updatedAt    DateTime @updatedAt
  updatedBy    String

  servicesDocuments ServicesDocuments[]
}

model ServicesDocuments {
  id         Int      @id @default(autoincrement())
  queue      Queue    @relation(fields: [queueId], references: [id])
  queueId    Int
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
  document   Document @relation(fields: [documentId], references: [id])
  documentId Int
  createdAt  DateTime @default(now())
  createdBy  String
  updatedAt  DateTime @updatedAt
  updatedBy  String
}
